{"ast":null,"code":"import API_BASE_URL from '../config/api';\nconst getToken = () => localStorage.getItem('token');\nconst handleResponse = async response => {\n  if (response.ok) {\n    return response.json();\n  } else {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n  }\n};\nconst handleError = error => {\n  console.error('API call failed:', error);\n  if (error instanceof Response) {\n    console.error('Response status:', error.status);\n  }\n  throw error;\n};\nconst apiCall = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, options);\n    return await handleResponse(response);\n  } catch (error) {\n    return handleError(error);\n  }\n};\nexport const login = (email, password) => apiCall(`${API_BASE_URL}/auth/login`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    email,\n    password\n  })\n});\nexport const register = (name, email, password) => apiCall(`${API_BASE_URL}/auth/register`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name,\n    email,\n    password\n  })\n});\nexport const getPosts = () => apiCall(`${API_BASE_URL}/posts`);\nexport const getPost = id => apiCall(`${API_BASE_URL}/posts/${id}`);\nexport const createPost = postData => apiCall(`${API_BASE_URL}/posts`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${getToken()}`\n  },\n  body: JSON.stringify(postData)\n});\nexport const updatePost = (id, postData) => apiCall(`${API_BASE_URL}/posts/${id}`, {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${getToken()}`\n  },\n  body: JSON.stringify(postData)\n});\nexport const deletePost = id => apiCall(`${API_BASE_URL}/posts/${id}`, {\n  method: 'DELETE',\n  headers: {\n    'Authorization': `Bearer ${getToken()}`\n  }\n});\nexport const getUserProfile = () => apiCall(`${API_BASE_URL}/auth/profile`, {\n  headers: {\n    'Authorization': `Bearer ${getToken()}`\n  }\n});\nexport const getUserData = async (userId, token) => {\n  const response = await fetch(`/api/users/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch user data');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","getToken","localStorage","getItem","handleResponse","response","ok","json","errorData","catch","Error","message","status","handleError","error","console","Response","apiCall","url","options","fetch","login","email","password","method","headers","body","JSON","stringify","register","name","getPosts","getPost","id","createPost","postData","updatePost","deletePost","getUserProfile","getUserData","userId","token"],"sources":["/home/aniket/Development/Projects/Blog App using React/src/services/api.js"],"sourcesContent":["import API_BASE_URL from '../config/api';\n\nconst getToken = () => localStorage.getItem('token');\n\nconst handleResponse = async (response) => {\n  if (response.ok) {\n    return response.json();\n  } else {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n  }\n};\n\nconst handleError = (error) => {\n  console.error('API call failed:', error);\n  if (error instanceof Response) {\n    console.error('Response status:', error.status);\n  }\n  throw error;\n};\n\nconst apiCall = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, options);\n    return await handleResponse(response);\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\nexport const login = (email, password) =>\n  apiCall(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password }),\n  });\n\nexport const register = (name, email, password) =>\n  apiCall(`${API_BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ name, email, password }),\n  });\n\nexport const getPosts = () =>\n  apiCall(`${API_BASE_URL}/posts`);\n\nexport const getPost = (id) =>\n  apiCall(`${API_BASE_URL}/posts/${id}`);\n\nexport const createPost = (postData) =>\n  apiCall(`${API_BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(postData),\n  });\n\nexport const updatePost = (id, postData) =>\n  apiCall(`${API_BASE_URL}/posts/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(postData),\n  });\n\nexport const deletePost = (id) =>\n  apiCall(`${API_BASE_URL}/posts/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${getToken()}`,\n    },\n  });\n\nexport const getUserProfile = () =>\n  apiCall(`${API_BASE_URL}/auth/profile`, {\n    headers: {\n      'Authorization': `Bearer ${getToken()}`,\n    },\n  });\n\n  export const getUserData = async (userId, token) => {\n    const response = await fetch(`/api/users/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user data');\n    }\n    return response.json();\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}