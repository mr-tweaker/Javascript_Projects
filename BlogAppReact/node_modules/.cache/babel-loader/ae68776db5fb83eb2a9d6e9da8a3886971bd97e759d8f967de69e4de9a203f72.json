{"ast":null,"code":"var _jsxFileName = \"/home/aniket/Development/Projects/Blog App using React/src/components/BlogList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getPosts } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const data = await getPosts();\n        setPosts(data);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch posts');\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"blog-list\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/post/${post._id}`,\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-metadata\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"author\",\n          children: [\"By: \", post.author.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"categories\",\n          children: post.categories.map((category, index) => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/category/${category}`,\n            className: \"category\",\n            children: category\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tags\",\n          children: post.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/tag/${tag}`,\n            className: \"tag\",\n            children: [\"#\", tag]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(BlogList, \"ok8foY8gcvyzARQ2tOEX9/uHXPU=\");\n_c = BlogList;\nexport default BlogList;\nvar _c;\n$RefreshReg$(_c, \"BlogList\");","map":{"version":3,"names":["React","useState","useEffect","Link","getPosts","jsxDEV","_jsxDEV","BlogList","_s","posts","setPosts","loading","setLoading","error","setError","fetchPosts","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","post","to","_id","title","author","name","categories","category","index","tags","tag","_c","$RefreshReg$"],"sources":["/home/aniket/Development/Projects/Blog App using React/src/components/BlogList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getPosts } from '../services/api';\n\nfunction BlogList() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const data = await getPosts();\n        setPosts(data);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch posts');\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>{error}</div>;\n\n  return (\n    <ul className=\"blog-list\">\n      {posts.map(post => (\n        <li key={post._id}>\n          <Link to={`/post/${post._id}`}>{post.title}</Link>\n          <div className=\"post-metadata\">\n            <span className=\"author\">By: {post.author.name}</span>\n            <span className=\"categories\">\n              {post.categories.map((category, index) => (\n                <Link key={index} to={`/category/${category}`} className=\"category\">\n                  {category}\n                </Link>\n              ))}\n            </span>\n            <span className=\"tags\">\n              {post.tags.map((tag, index) => (\n                <Link key={index} to={`/tag/${tag}`} className=\"tag\">\n                  #{tag}\n                </Link>\n              ))}\n            </span>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default BlogList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}