{"ast":null,"code":"var _jsxFileName = \"/home/aniket/Development/Projects/Blog App using React/src/components/SearchResults.js\",\n  _s = $RefreshSig$();\n// src/components/SearchResults.js\nimport React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchResults() {\n  _s();\n  const [results, setResults] = useState([]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('q');\n  useEffect(() => {\n    // This is where you'd typically fetch search results from your API\n    // For this example, we'll use mock data\n    const mockSearch = q => {\n      const allPosts = [{\n        id: 1,\n        title: 'First Blog Post',\n        content: 'This is the first blog post content.'\n      }, {\n        id: 2,\n        title: 'Second Blog Post',\n        content: 'This is the second blog post content.'\n      }, {\n        id: 3,\n        title: 'Third Blog Post',\n        content: 'This is the third blog post content.'\n      }];\n      return allPosts.filter(post => post.title.toLowerCase().includes(q.toLowerCase()) || post.content.toLowerCase().includes(q.toLowerCase()));\n    };\n    setResults(mockSearch(query));\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Search Results for \\\"\", query, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), results.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No results found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/post/${post.id}`,\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [post.content.substring(0, 100), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchResults, \"YKZjNpZ70c6qO21uuL9LmG6Bf3Y=\", false, function () {\n  return [useLocation];\n});\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","jsxDEV","_jsxDEV","SearchResults","_s","results","setResults","location","searchParams","URLSearchParams","search","query","get","mockSearch","q","allPosts","id","title","content","filter","post","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","to","substring","_c","$RefreshReg$"],"sources":["/home/aniket/Development/Projects/Blog App using React/src/components/SearchResults.js"],"sourcesContent":["// src/components/SearchResults.js\nimport React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction SearchResults() {\n  const [results, setResults] = useState([]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('q');\n\n  useEffect(() => {\n    // This is where you'd typically fetch search results from your API\n    // For this example, we'll use mock data\n    const mockSearch = (q) => {\n      const allPosts = [\n        { id: 1, title: 'First Blog Post', content: 'This is the first blog post content.' },\n        { id: 2, title: 'Second Blog Post', content: 'This is the second blog post content.' },\n        { id: 3, title: 'Third Blog Post', content: 'This is the third blog post content.' },\n      ];\n      return allPosts.filter(post => \n        post.title.toLowerCase().includes(q.toLowerCase()) || \n        post.content.toLowerCase().includes(q.toLowerCase())\n      );\n    };\n\n    setResults(mockSearch(query));\n  }, [query]);\n\n  return (\n    <div className=\"search-results\">\n      <h2>Search Results for \"{query}\"</h2>\n      {results.length === 0 ? (\n        <p>No results found.</p>\n      ) : (\n        <ul>\n          {results.map(post => (\n            <li key={post.id}>\n              <Link to={`/post/${post.id}`}>{post.title}</Link>\n              <p>{post.content.substring(0, 100)}...</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default SearchResults;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}